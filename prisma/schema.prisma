generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  sessions      Session[]
  accounts      Account[]
  threads       Thread[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key to User
  threads           Thread[]

  @@unique([provider, providerAccountId]) // Composite unique key
  @@map("accounts") // Table name customization (optional)
}

model Thread {
  id        String  @id @default(cuid())
  name      String
  accountId String
  account   Account @relation(fields: [accountId], references: [id], onDelete: Cascade)
  plans     Plan[]
  User      User?   @relation(fields: [userId], references: [id])  
  userId    String?

  @@map("threads")
}


model Plan {
  id            Int      @id @default(autoincrement())
  tripName      String
  startDate     DateTime
  endDate       DateTime
  budget        String?
  travelers     Json
  selectedViber String[]
  itinerary     Json
  thread        Thread   @relation(fields: [threadId], references: [id])
  threadId      String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("plans") // Optional: Custom table name
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Foreign key to User

  @@map("sessions") // Table name customization (optional)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token]) // Composite unique key
  @@map("verification_tokens") // Table name customization (optional)
}
